% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spec.R
\name{spec_new}
\alias{spec_new}
\alias{spec_empty}
\alias{spec_add}
\alias{spec_rmv}
\alias{spec_sub}
\alias{spec_describe}
\title{Create, edit, and combine model specifications}
\usage{
spec_new(name = "Model 0", control = "1", parent = NULL,
  relation = NULL)

spec_empty(name = "Model 0")

spec_add(model_spec, name, ...)

spec_rmv(model_spec, name, ...)

spec_sub(model_spec, name, ...)

spec_describe(model_spec)
}
\arguments{
\item{name}{(character value). The label that will be used
to describe this model specification}

\item{control}{A set of variable names (separated by commas) that will be
used to adjust estimates in fitted models when this specification is
fit. The values may be supplied as unquoted variable names or as
a character vector.}

\item{parent}{(\code{apri_spec} object). If you are creating an empty model,
this argument is not needed. For all descendant models, this argument
specifies what specification the descendant is derived from.}

\item{relation}{(character value). Descendant models may add, remove,
or substitute control variables from their parent model. This argument
sets the relationship between parent and descendant. Valid inputs are
'add', 'rmv', or 'sub'.}
}
\value{
\itemize{
\item \code{spec_empty()} returns an unadjusted model specification.
\item \code{spec_add()}, \code{spec_rmv()} returns a model specification with the
designated control variables added or removed from the parent
model specification.
\item \code{spec_sub()} returns a model specification with the designated
control variables (left hand side of the \code{=}) replaced by
variable names supplied by the user (right hand side of the \code{=})
}
}
\description{
\code{spec_empty()}, \code{spec_add()}, \code{spec_rmv()}, and \code{spec_sub()} are
functions that can be used to create model fitting specifications.
\code{spec_describe()} is a function that helps clarify model specifications
and facilitates interactive work and clear communication.
}
\details{
Use \code{spec_empty()} to create a generic unadjusted specification.
Use \code{spec_add()}, \code{spec_rmv()}, and \code{spec_sub()} to create descendant
model specifications, and use \code{spec_describe()} to summarize the structure
of the model specifications in a concise manner that accounts for
their dependencies (see examples).
}
\examples{


# Make an unadjusted model
m0  <- spec_empty("Model 0")

# spec_describe(spec) is the same as print(spec)
spec_describe(m0)
print(m0)

# Model 1 includes adjustment for sex and class
m1  <- spec_add(m0, name = "Model 1", sex, pclass)

m1

# Model 2a = model 1 + no. of siblings/spouses
m2a <- spec_add(m1, name = 'Model 2a', sibsp)

m2a

# Model 2b = model 1 + no. of parents/children
m2b <- spec_add(m1, name = 'Model 2b', parch)

m2b

# Model 3 = model 1, swapping out class for ticket fare

m3 <- spec_sub(m1, name = 'Model 3', pclass = fare)

m3

}
\concept{model specification functions}
